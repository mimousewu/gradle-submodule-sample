apply plugin: 'checkstyle'

def configDir = "${rootProject.projectDir}/quality"

ext {
	ignoreCheckstyleFailures = project.properties['ignoreCheckstyleFailures'] ? 
    	project.properties['ignoreCheckstyleFailures'].toBoolean(): true
    checkstyleMaxErrors = project.properties['checkstyleMaxErrors'] ? 
    	project.properties['checkstyleMaxErrors'].toInteger(): 1
}

checkstyle {
    configFile = file("${configDir}/checkstyle.xml")
    toolVersion = "7.4"
    sourceSets = [sourceSets.main]
    ignoreFailures = ignoreCheckstyleFailures
    maxErrors = checkstyleMaxErrors
}

// fail the build for checkstyle warning, workaround for https://github.com/gradle/gradle/issues/881
// tasks.withType(Checkstyle).each { checkstyleTask ->
//     checkstyleTask.doLast {
//         reports.all { report ->
//             def outputFile = report.destination
//             if (outputFile.exists() && outputFile.text.contains("<error ")) {
//                 throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
//            }
//         }
//     }
// }

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile("${configDir}/checkstyle-noframes-severity-sorted.xsl")
    }
}

// task checkstyle(type: Checkstyle) {
//     description = "Check Java style with Checkstyle"
// }
// check.dependsOn 'checkstyle'